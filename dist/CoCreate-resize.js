/*! For license information please see CoCreate-resize.js.LICENSE.txt */
!function(Q,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.CoCreateResize=t():Q.CoCreateResize=t()}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"./node_modules/@cocreate/observer/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// window.addEventListener("load", () => {\n\n/*\nCoCreate.observer.init({ \n\tname: \'CoCreateFetchInit\', // no usage, just to provide for console debugging \n\tobserve: [\'subtree\', \'childList\',\'attributes\'], // the same parameters of options in #https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe\n\tattributes: [\'data-fetch_collection\'], // it doesn\'t count added nodes or remove nodes\n\tinclude: ".classname", // a selector to select only elements that matches\n\texclude: ".classname", // a selector to exclude elements from processing\n\tcallback: function(mutation) { // a function which gets a mutation object according to #https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n\t\tCoCreateFetch.initElement(mutation.target)\n\t}\n})\n*/\n\n\n/**\n * description\n * \n * @param {String} [name] - an optional name to provide for debugging console\n * @param {Array} observe - a list of mutation type to be observerd, a mix of possible `attributes`, `childList` or `subtree`\n * ... and other params can be here \n * \n * @return null\n */\nwindow.profiler = {}\nwindow.counter = 0;\nwindow.counter2 = 0;\nwindow.targets = {};\nwindow.attributeName = {};\nif (!Element.prototype.matches) {\n  Element.prototype.matches =\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector ||\n    function(s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n      while (--i >= 0 && matches.item(i) !== this) {}\n      return i > -1;\n    };\n}\n\nconst CoCreateObserver = {\n  initTasks: new Map(),\n  attrTasks: new Map(),\n  rules: new Map(),\n  rulesArray: [],\n\n  __init: function() {\n    const self = this;\n    const observer = new MutationObserver((mutationsList, observer) => self.__callback(mutationsList, observer));\n\n    // setTimeout(()=>{\n    observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: false,\n      attributeOldValue: true,\n      characterData: true,\n    });\n  },\n\n  // init: function(data) {\n  //   this.add(data);\n  // },\n\n  init: function({ observe, include, exclude, attributes, name, callback }) {\n    // if (name == \'ccAttribute\' || name == \'ccCss\') {\n      if (observe.some(x => x == "childList")) {\n        this.initTasks.set(callback, { observe, include, exclude, attributes, name });\n      }\n\n      if (observe.some(x => x == "attributes")) {\n        this.attrTasks.set(callback, { observe, include, exclude, attributes, name });\n      }\n    // }\n\n  },\n  remove: function(callback) {\n    this.initTasks.delete(callback)\n    this.attrTasks.delete(callback)\n  },\n\n  addRule: function({ include, exclude, name }) {\n    this.rules.set(name, { include, exclude });\n    this.rulesArray = Array.from(this.rules);\n  },\n\n  removeRule: function({ name }) {\n    this.rules.delete(name);\n    this.rulesArray = Array.from(this.rules);\n  },\n\n  __callback: function(mutationsList, observer) {\n    // console.log(this)\n    window.counter++;\n    for (let mutation of mutationsList) {\n      if (mutation.type == "childList" && mutation.addedNodes.length > 0) {\n        //. run init functions\n        this.__initCallback(mutation)\n      }\n\n      if (mutation.type == "attributes") {\n        //. run attributes functions\n        this.__attrCallback(mutation);\n      }\n    }\n  },\n\n  __initCallback: function(mutation) {\n    let addedNodes = Array.from(mutation.addedNodes);\n\n    this.initTasks.forEach(({ observe, include, exclude, attributes, name }, callback) => {\n\n      mutation.addedNodes.forEach((el) => {\n        if (!el.tagName) return;\n\n        if (include && !(el.matches(include) || el.querySelector(include))) {\n          return\n        }\n        if (exclude && (el.matches(exclude) || el.querySelector(exclude))) {\n          return;\n        }\n\n        if (el.created) return;\n        window.counter2++;\n        window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n        window.targets[mutation.target.id || mutation.target.tagName] =\n          window.targets[mutation.target.id || mutation.target.tagName] != undefined ?\n          window.targets[mutation.target.id || mutation.target.tagName] + 1 :\n          0;\n\n        window.attributeName[mutation.attributeName] =\n          window.attributeName[mutation.attributeName] != undefined ?\n          window.attributeName[mutation.attributeName] + 1 :\n          0;\n        callback.apply(null, [{ type: mutation.type, target: el }]);\n      })\n    });\n\n    addedNodes.map(el => el.created = true);\n  },\n\n  __attrCallback: function(mutation) {\n    for (let [name, { include, exclude }] of this.rulesArray) {\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n    }\n    this.attrTasks.forEach(({ observe, include, exclude, attributes, name }, callback) => {\n      if (attributes && mutation.attributeName && !attributes.includes(mutation.attributeName)) {\n        return;\n      }\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n\n      if (mutation.attributeName) {\n        let newValue = mutation.target.getAttribute(mutation.attributeName);\n        if (newValue != mutation.oldValue) {\n          window.counter2++;\n          window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n          window.targets[mutation.target.id || mutation.target.tagName] =\n            window.targets[mutation.target.id || mutation.target.tagName] != undefined ?\n            window.targets[mutation.target.id || mutation.target.tagName] + 1 :\n            0;\n\n          window.attributeName[mutation.attributeName] =\n            window.attributeName[mutation.attributeName] != undefined ?\n            window.attributeName[mutation.attributeName] + 1 :\n            0;\n          callback.apply(null, [mutation]);\n        }\n      }\n\n    })\n  },\n\n  setInitialized: function(element, type) {\n    // element.setAttribute(`initialized_${type}`, "true");\n    type = type || "";\n    let key = "co_initialized_" + type;\n    element[key] = true;\n  },\n\n  getInitialized: function(element, type) {\n    type = type || "";\n    let key = "co_initialized_" + type;\n    if (!element[key]) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n}\n\nCoCreateObserver.__init();\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CoCreateObserver);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@cocreate/observer/src/index.js\n')},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n__webpack_require__(/*! ./style.css */ \"./src/style.css\");\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"./node_modules/@cocreate/observer/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst coCreateResizeWidgets = {\n  selector: '',\n  //'.resize',\n  resizers: [],\n  resizeWidgets: [],\n  init: function (handleObj) {\n    for (var handleKey in handleObj) if (handleObj.hasOwnProperty(handleKey) && handleKey == 'selector') this.selector = handleObj[handleKey];\n\n    this.resizers = document.querySelectorAll(this.selector);\n\n    var _this = this;\n\n    this.resizers.forEach(function (resize, idx) {\n      let resizeWidget = new CoCreateResize(resize, handleObj);\n      _this.resizeWidgets[idx] = resizeWidget;\n    });\n  },\n  initElement: function (target) {\n    let resizeWidget = new CoCreateResize(target, {\n      dragLeft: \"[data-resize_handle='left']\",\n      dragRight: \"[data-resize_handle='right']\",\n      dragTop: \"[data-resize_handle='top']\",\n      dragBottom: \"[data-resize_handle='bottom']\"\n    });\n    this.resizeWidgets[0] = resizeWidget;\n  }\n};\n\nfunction CoCreateResize(resizer, options) {\n  this.resizeWidget = resizer;\n  this.cornerSize = 10;\n  this.init(options);\n}\n\nCoCreateResize.prototype = {\n  init: function (handleObj) {\n    if (this.resizeWidget) {\n      this.leftDrag = this.resizeWidget.querySelector(handleObj['dragLeft']);\n      this.rightDrag = this.resizeWidget.querySelector(handleObj['dragRight']);\n      this.topDrag = this.resizeWidget.querySelector(handleObj['dragTop']);\n      this.bottomDrag = this.resizeWidget.querySelector(handleObj['dragBottom']);\n      this.bindListeners();\n      this.initResize();\n    }\n  },\n  initResize: function () {\n    if (this.leftDrag) {\n      this.addListenerMulti(this.leftDrag, 'mousemove touchmove', this.checkLeftDragTopCorner);\n      this.addListenerMulti(this.leftDrag, 'mousemove touchmove', this.checkLeftDragBottomCorner);\n    }\n\n    if (this.topDrag) {\n      this.addListenerMulti(this.topDrag, 'mousemove touchmove', this.checkTopDragLeftCorner);\n      this.addListenerMulti(this.topDrag, 'mousemove touchmove', this.checkTopDragRightCorner);\n    }\n\n    if (this.rightDrag) {\n      this.addListenerMulti(this.rightDrag, 'mousemove touchmove', this.checkRightDragTopCorner);\n      this.addListenerMulti(this.rightDrag, 'mousemove touchmove', this.checkRightDragBottomCorner);\n    }\n\n    if (this.bottomDrag) {\n      this.addListenerMulti(this.bottomDrag, 'mousemove touchmove', this.checkBottomDragLeftCorner);\n      this.addListenerMulti(this.bottomDrag, 'mousemove touchmove', this.checkBottomDragRightCorner);\n    }\n  },\n  initTopDrag: function (e) {\n    this.processIframe();\n    this.startTop = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).top, 10);\n    this.startHeight = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).height, 10);\n    if (e.touches) this.startY = e.touches[0].clientY;else this.startY = e.clientY;\n    this.addListenerMulti(document.documentElement, 'mousemove touchmove', this.doTopDrag);\n    this.addListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  doTopDrag: function (e) {\n    let top, height;\n    if (e.touches) e = e.touches[0];\n    top = this.startTop + e.clientY - this.startY;\n    height = this.startHeight - e.clientY + this.startY;\n    if (top < 10 || height < 10) return;\n    this.resizeWidget.style.top = top + 'px';\n    this.resizeWidget.style.height = height + 'px';\n  },\n  initBottomDrag: function (e) {\n    this.processIframe();\n    this.startTop = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).top, 10);\n    this.startHeight = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).height, 10);\n    if (e.touches) this.startY = e.touches[0].clientY;else this.startY = e.clientY;\n    this.addListenerMulti(document.documentElement, 'mousemove touchmove', this.doBottomDrag);\n    this.addListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  doBottomDrag: function (e) {\n    let height = 0;\n    if (e.touches) height = this.startHeight + e.touches[0].clientY - this.startY;else height = this.startHeight + e.clientY - this.startY;\n    if (height < 10) return;\n    this.resizeWidget.style.height = height + 'px';\n  },\n  initLeftDrag: function (e) {\n    this.processIframe();\n    this.startLeft = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).left, 10);\n    this.startWidth = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).width, 10);\n    if (e.touches) this.startX = e.touches[0].clientX;else this.startX = e.clientX;\n    this.addListenerMulti(document.documentElement, 'mousemove touchmove', this.doLeftDrag);\n    this.addListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  doLeftDrag: function (e) {\n    let left, width;\n    if (e.touches) e = e.touches[0];\n    left = this.startLeft + e.clientX - this.startX;\n    width = this.startWidth - e.clientX + this.startX;\n    if (width < 10) return;\n    this.resizeWidget.style.left = left + 'px';\n    this.resizeWidget.style.width = width + 'px';\n  },\n  initRightDrag: function (e) {\n    this.processIframe();\n    this.startWidth = parseInt(document.defaultView.getComputedStyle(this.resizeWidget).width, 10);\n    if (e.touches) this.startX = e.touches[0].clientX;else this.startX = e.clientX;\n    this.addListenerMulti(document.documentElement, 'mousemove touchmove', this.doRightDrag);\n    this.addListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  doRightDrag: function (e) {\n    let width = 0;\n    if (e.touches) width = this.startWidth + e.touches[0].clientX - this.startX;else width = this.startWidth + e.clientX - this.startX;\n    if (width < 10) return;\n    this.resizeWidget.style.width = width + 'px';\n  },\n  stopDrag: function (e) {\n    this.resizeWidget.querySelectorAll('iframe').forEach(function (item) {\n      item.style.pointerEvents = null;\n    });\n    this.removeListenerMulti(document.documentElement, 'mousemove touchmove', this.doTopDrag);\n    this.removeListenerMulti(document.documentElement, 'mousemove touchmove', this.doBottomDrag);\n    this.removeListenerMulti(document.documentElement, 'mousemove touchmove', this.doLeftDrag);\n    this.removeListenerMulti(document.documentElement, 'mousemove touchmove', this.doRightDrag);\n    this.removeListenerMulti(document.documentElement, 'mouseup touchend', this.stopDrag);\n  },\n  checkTopDragLeftCorner: function (e) {\n    let offsetX,\n        scrollLeft = document.documentElement.scrollLeft;\n    if (e.touches) e = e.touches[0];\n    offsetX = e.clientX - this.getLeftDistance(this.topDrag) + scrollLeft;\n    this.removeListenerMulti(this.topDrag, 'mousedown touchstart', this.initTopDrag);\n    this.removeListenerMulti(this.topDrag, 'mousedown touchstart', this.initLeftDrag);\n    this.addListenerMulti(this.topDrag, 'mousedown touchstart', this.initTopDrag);\n\n    if (offsetX < this.cornerSize && this.leftDrag) {\n      this.topDrag.style.cursor = 'se-resize';\n      this.addListenerMulti(this.topDrag, 'mousedown touchstart', this.initLeftDrag);\n    } else {\n      this.topDrag.style.cursor = 's-resize';\n    }\n  },\n  checkLeftDragTopCorner: function (e) {\n    let offsetY,\n        scrollTop = document.documentElement.scrollTop;\n    if (e.touches) e = e.touches[0];\n    offsetY = e.clientY - this.getTopDistance(this.leftDrag) + scrollTop;\n    this.removeListenerMulti(this.leftDrag, 'mousedown touchstart', this.initLeftDrag);\n    this.removeListenerMulti(this.leftDrag, 'mousedown touchstart', this.initTopDrag);\n    this.addListenerMulti(this.leftDrag, 'mousedown touchstart', this.initLeftDrag);\n\n    if (offsetY < this.cornerSize && this.topDrag) {\n      this.leftDrag.style.cursor = 'se-resize';\n      this.addListenerMulti(this.leftDrag, 'mousedown touchstart', this.initTopDrag);\n    } else {\n      this.leftDrag.style.cursor = 'e-resize';\n    }\n  },\n  checkTopDragRightCorner: function (e) {\n    let offsetX,\n        scrollLeft = document.documentElement.scrollLeft;\n    this.removeListenerMulti(this.topDrag, 'mousedown touchstart', this.initTopDrag);\n    this.removeListenerMulti(this.topDrag, 'mousedown touchstart', this.initRightDrag);\n    this.addListenerMulti(this.topDrag, 'mousedown touchstart', this.initTopDrag);\n\n    if (this.rightDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetX = this.getLeftDistance(this.rightDrag) - e.clientX - scrollLeft;\n\n      if (offsetX < this.cornerSize) {\n        this.topDrag.style.cursor = 'ne-resize';\n        this.addListenerMulti(this.topDrag, 'mousedown touchstart', this.initRightDrag);\n      } else if (!this.leftDrag) {\n        this.topDrag.style.cursor = 's-resize';\n      }\n    }\n  },\n  checkRightDragTopCorner: function (e) {\n    let offsetY,\n        scrollTop = document.documentElement.scrollTop;\n    this.removeListenerMulti(this.rightDrag, 'mousedown touchstart', this.initRightDrag);\n    this.removeListenerMulti(this.rightDrag, 'mousedown touchstart', this.initTopDrag);\n    this.addListenerMulti(this.rightDrag, 'mousedown touchstart', this.initRightDrag);\n\n    if (this.topDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetY = e.clientY - this.getTopDistance(this.topDrag) + scrollTop;\n\n      if (offsetY < this.cornerSize) {\n        this.rightDrag.style.cursor = 'ne-resize';\n        this.addListenerMulti(this.rightDrag, 'mousedown touchstart', this.initTopDrag);\n      } else {\n        this.rightDrag.style.cursor = 'e-resize';\n      }\n    }\n  },\n  checkBottomDragLeftCorner: function (e) {\n    let offsetX,\n        scrollLeft = document.documentElement.scrollLeft;\n    if (e.touches) e = e.touches[0];\n    offsetX = e.clientX - this.getLeftDistance(this.bottomDrag) + scrollLeft;\n    this.removeListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initBottomDrag);\n    this.removeListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initLeftDrag);\n    this.addListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initBottomDrag);\n\n    if (offsetX < this.cornerSize && this.leftDrag) {\n      this.bottomDrag.style.cursor = 'ne-resize';\n      this.addListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initLeftDrag);\n    } else {\n      this.bottomDrag.style.cursor = 's-resize';\n    }\n  },\n  checkLeftDragBottomCorner: function (e) {\n    let offsetY,\n        scrollTop = document.documentElement.scrollTop;\n    this.removeListenerMulti(this.leftDrag, 'mousedown touchstart', this.initLeftDrag);\n    this.removeListenerMulti(this.leftDrag, 'mousedown touchstart', this.initBottomDrag);\n    this.addListenerMulti(this.leftDrag, 'mousedown touchstart', this.initLeftDrag);\n\n    if (this.bottomDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetY = this.getTopDistance(this.bottomDrag) - e.clientY - scrollTop;\n\n      if (offsetY < this.cornerSize) {\n        this.leftDrag.style.cursor = 'ne-resize';\n        this.addListenerMulti(this.leftDrag, 'mousedown touchstart', this.initBottomDrag);\n      } else if (!this.topDrag) {\n        this.leftDrag.style.cursor = 'e-resize';\n      }\n    }\n  },\n  checkBottomDragRightCorner: function (e) {\n    let offsetX,\n        scrollLeft = document.documentElement.scrollLeft;\n    this.removeListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initBottomDrag);\n    this.removeListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initRightDrag);\n    this.addListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initBottomDrag);\n\n    if (this.rightDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetX = this.getLeftDistance(this.rightDrag) - e.clientX - scrollLeft;\n\n      if (offsetX < this.cornerSize) {\n        this.bottomDrag.style.cursor = 'se-resize';\n        this.addListenerMulti(this.bottomDrag, 'mousedown touchstart', this.initRightDrag);\n      } else if (!this.leftDrag) {\n        this.bottomDrag.style.cursor = 's-resize';\n      }\n    }\n  },\n  checkRightDragBottomCorner: function (e) {\n    let offsetY,\n        scrollTop = document.documentElement.scrollTop;\n    this.removeListenerMulti(this.rightDrag, 'mousedown touchstart', this.initRightDrag);\n    this.removeListenerMulti(this.rightDrag, 'mousedown touchstart', this.initBottomDrag);\n    this.addListenerMulti(this.rightDrag, 'mousedown touchstart', this.initRightDrag);\n\n    if (this.bottomDrag) {\n      if (e.touches) e = e.touches[0];\n      offsetY = this.getTopDistance(this.bottomDrag) - e.clientY - scrollTop;\n\n      if (offsetY < this.cornerSize) {\n        this.rightDrag.style.cursor = 'se-resize';\n        this.addListenerMulti(this.rightDrag, 'mousedown touchstart', this.initBottomDrag);\n      } else if (!this.topDrag) {\n        this.rightDrag.style.cursor = 'e-resize';\n      }\n    }\n  },\n  bindListeners: function () {\n    this.initLeftDrag = this.initLeftDrag.bind(this);\n    this.doLeftDrag = this.doLeftDrag.bind(this);\n    this.initTopDrag = this.initTopDrag.bind(this);\n    this.doTopDrag = this.doTopDrag.bind(this);\n    this.initRightDrag = this.initRightDrag.bind(this);\n    this.doRightDrag = this.doRightDrag.bind(this);\n    this.initBottomDrag = this.initBottomDrag.bind(this);\n    this.doBottomDrag = this.doBottomDrag.bind(this);\n    this.stopDrag = this.stopDrag.bind(this);\n    this.checkTopDragLeftCorner = this.checkTopDragLeftCorner.bind(this);\n    this.checkLeftDragTopCorner = this.checkLeftDragTopCorner.bind(this);\n    this.checkTopDragRightCorner = this.checkTopDragRightCorner.bind(this);\n    this.checkRightDragTopCorner = this.checkRightDragTopCorner.bind(this);\n    this.checkBottomDragLeftCorner = this.checkBottomDragLeftCorner.bind(this);\n    this.checkLeftDragBottomCorner = this.checkLeftDragBottomCorner.bind(this);\n    this.checkBottomDragRightCorner = this.checkBottomDragRightCorner.bind(this);\n    this.checkRightDragBottomCorner = this.checkRightDragBottomCorner.bind(this);\n  },\n  // Get an element's distance from the top of the page\n  getTopDistance: function (elem) {\n    var location = 0;\n\n    if (elem.offsetParent) {\n      do {\n        location += elem.offsetTop;\n        elem = elem.offsetParent;\n      } while (elem);\n    }\n\n    return location >= 0 ? location : 0;\n  },\n  // Get an element's distance from the left of the page\n  getLeftDistance: function (elem) {\n    var location = 0;\n\n    if (elem.offsetParent) {\n      do {\n        location += elem.offsetLeft;\n        elem = elem.offsetParent;\n      } while (elem);\n    }\n\n    return location >= 0 ? location : 0;\n  },\n  // Bind multiiple events to a listener\n  addListenerMulti: function (element, eventNames, listener) {\n    var events = eventNames.split(' ');\n\n    for (var i = 0, iLen = events.length; i < iLen; i++) {\n      element.addEventListener(events[i], listener, false);\n    }\n  },\n  // Remove multiiple events from a listener\n  removeListenerMulti: function (element, eventNames, listener) {\n    var events = eventNames.split(' ');\n\n    for (var i = 0, iLen = events.length; i < iLen; i++) {\n      element.removeEventListener(events[i], listener, false);\n    }\n  },\n  // style=\"pointer-events:none\" for iframe when drag event starts\n  processIframe: function () {\n    this.resizeWidget.querySelectorAll('iframe').forEach(function (item) {\n      item.style.pointerEvents = 'none';\n    });\n  }\n};\n\n_observer.default.init({\n  name: 'CoCreateResize',\n  observe: ['subtree', 'childList'],\n  include: '.resize',\n  callback: function (mutation) {\n    coCreateResizeWidgets.initElement(mutation.target);\n  }\n});\n\nvar _default = coCreateResizeWidgets;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n")},"./node_modules/file-loader/dist/cjs.js!./src/style.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "c3e3f7721631fede775f9231c9932cdb.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZVJlc2l6ZS8uL3NyYy9zdHlsZS5jc3M/NDYyZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUscUJBQXVCLHlDQUF5QyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9maWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NyYy9zdHlsZS5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYzNlM2Y3NzIxNjMxZmVkZTc3NWY5MjMxYzk5MzJjZGIuY3NzXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/file-loader/dist/cjs.js!./src/style.css\n')},"./src/style.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_file_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/file-loader/dist/cjs.js!./style.css */ "./node_modules/file-loader/dist/cjs.js!./src/style.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_file_loader_dist_cjs_js_style_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZVJlc2l6ZS8uL3NyYy9zdHlsZS5jc3M/YjYyMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdGO0FBQ3hGLFlBQXdGOztBQUV4RixlQUFlOztBQUVmOztBQUVBLGFBQWEseUdBQUcsQ0FBQyxvRkFBTzs7OztBQUl4QixpRUFBZSxFIiwiZmlsZSI6Ii4vc3JjL3N0eWxlLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvTGlua1RhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge1wiaW5qZWN0VHlwZVwiOlwibGlua1RhZ1wifTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IHt9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/style.css\n')},"./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nmodule.exports = function (url, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {};\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  var link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.href = url;\n  Object.keys(options.attributes).forEach(function (key) {\n    link.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(link);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(link);\n  }\n\n  return function (newUrl) {\n    if (typeof newUrl === 'string') {\n      link.href = newUrl;\n    } else {\n      link.parentNode.removeChild(link);\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZVJlc2l6ZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9MaW5rVGFnLmpzPzY3NGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJOztBQUVuRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9MaW5rVGFnLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmF0dHJpYnV0ZXMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuYXR0cmlidXRlcyA6IHt9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xuICBsaW5rLnJlbCA9ICdzdHlsZXNoZWV0JztcbiAgbGluay5ocmVmID0gdXJsO1xuICBPYmplY3Qua2V5cyhvcHRpb25zLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGxpbmsuc2V0QXR0cmlidXRlKGtleSwgb3B0aW9ucy5hdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQobGluayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKGxpbmspO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChuZXdVcmwpIHtcbiAgICBpZiAodHlwZW9mIG5ld1VybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxpbmsuaHJlZiA9IG5ld1VybDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGluay5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmspO1xuICAgIH1cbiAgfTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var t=__webpack_module_cache__[Q];if(void 0!==t)return t.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.n=Q=>{var t=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(Q,t)=>{for(var B in t)__webpack_require__.o(t,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:t[B]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(Q){if("object"==typeof window)return window}}(),__webpack_require__.o=(Q,t)=>Object.prototype.hasOwnProperty.call(Q,t),__webpack_require__.r=Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},(()=>{var Q;__webpack_require__.g.importScripts&&(Q=__webpack_require__.g.location+"");var t=__webpack_require__.g.document;if(!Q&&t&&(t.currentScript&&(Q=t.currentScript.src),!Q)){var B=t.getElementsByTagName("script");B.length&&(Q=B[B.length-1].src)}if(!Q)throw new Error("Automatic publicPath is not supported in this browser");Q=Q.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=Q})();var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));